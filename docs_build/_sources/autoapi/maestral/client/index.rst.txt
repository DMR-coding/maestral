:mod:`maestral.client`
======================

.. py:module:: maestral.client

.. autoapi-nested-parse::

   This modules contains the Dropbox API client. It wraps calls to the Dropbox Python SDK
   and handles exceptions, chunked uploads or downloads, etc.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   maestral.client.SpaceUsage
   maestral.client.DropboxClient



Functions
~~~~~~~~~

.. autoapisummary::

   maestral.client.convert_api_errors
   maestral.client.convert_api_errors_decorator
   maestral.client.os_to_maestral_error
   maestral.client.fswatch_to_maestral_error
   maestral.client.dropbox_to_maestral_error


.. py:class:: SpaceUsage(used=None, allocation=None)

   Bases: :class:`dropbox.users.SpaceUsage`

   Information about a user's space usage and quota.

   :ivar users.SpaceUsage.used: The user's total space usage (bytes).
   :ivar users.SpaceUsage.allocation: The user's space allocation.


.. function:: convert_api_errors(dbx_path: Optional[str] = None, local_path: Optional[str] = None) -> Iterator[None]

   A context manager that catches and re-raises instances of :class:`OSError` and
   :class:`exceptions.DropboxException` as :class:`errors.MaestralApiError` or
   :class:`ConnectionError`.


.. function:: convert_api_errors_decorator(dbx_path_arg: Optional[int] = None, local_path_arg: Optional[int] = None) -> Callable[[_FT], _FT]

   Returns a decorator that catches and re-raises instances of :class:`OSError` and
   :class:`exceptions.DropboxException` as :class:`errors.MaestralApiError` or
   :class:`ConnectionError`.

   :param dbx_path_arg: Argument number to take as dbx_path for exception.
   :param local_path_arg: Argument number to take as local_path_arg for exception.


.. py:class:: DropboxClient(config_name: str, timeout: float = 100)

   Client for the Dropbox SDK.

   This client defines basic methods to wrap Dropbox Python SDK calls, such as
   creating, moving, modifying and deleting files and folders on Dropbox and
   downloading files from Dropbox.

   All Dropbox SDK exceptions and :class:`OSError` instances if related to accessing or
   saving local files will be caught and reraised as a
   :class:`errors.MaestralApiError`. Connection errors from requests will be caught and
   reraised as :class:`ConnectionError`.

   :param config_name: Name of config file and state file to use.
   :param timeout: Timeout for individual requests. Defaults to 100 sec if not given.

   .. method:: dbx(self) -> Dropbox
      :property:

      The actual Python Dropbox SDK


   .. method:: linked(self) -> bool
      :property:

      Indicates if the client is linked to a Dropbox account (read only). This will
      block until the user's keyring is unlocked to load the saved auth token.

      :raises: :class:`errors.KeyringAccessError` if keyring access fails.


   .. method:: get_auth_url(self) -> str

      Returns a URL to authorize access to a Dropbox account. To link a Dropbox
      account, retrieve an auth token from the URL and link Maestral by calling
      :meth:`link` with the provided token.

      :returns: URL to retrieve an OAuth token.


   .. method:: link(self, token: str) -> int

      Links Maestral with a Dropbox account using the given access token. The token
      will be stored for future usage as documented in the :mod:`oauth` module.

      :param token: OAuth token for Dropbox access.
      :returns: 0 on success, 1 for an invalid token and 2 for connection errors.


   .. method:: unlink(self) -> None

      Unlinks the Dropbox account.

      :raises: :class:`errors.KeyringAccessError`
      :raises: :class:`errors.DropboxAuthError`


   .. method:: account_id(self) -> Optional[str]
      :property:

      The unique Dropbox ID of the linked account


   .. method:: get_account_info(self, dbid: Optional[str] = None) -> users.FullAccount

      Gets current account information.

      :param dbid: Dropbox ID of account. If not given, will get the info of the
          currently linked account.
      :returns: Account info.


   .. method:: get_space_usage(self) -> SpaceUsage

      :returns: The space usage of the currently linked account.


   .. method:: get_metadata(self, dbx_path: str, **kwargs) -> files.Metadata

      Gets metadata for an item on Dropbox or returns ``False`` if no metadata is
      available. Keyword arguments are passed on to Dropbox SDK files_get_metadata
      call.

      :param dbx_path: Path of folder on Dropbox.
      :param kwargs: Keyword arguments for Dropbox SDK files_download_to_file.
      :returns: Metadata of item at the given path or ``None``.


   .. method:: list_revisions(self, dbx_path: str, mode: str = 'path', limit: int = 10) -> files.ListRevisionsResult

      Lists all file revisions for the given file.

      :param dbx_path: Path to file on Dropbox.
      :param mode: Must be 'path' or 'id'. If 'id', specify the Dropbox file ID
          instead of the file path to get revisions across move and rename events.
      :param limit: Maximum number of revisions to list. Defaults to 10.
      :returns: File revision history.


   .. method:: restore(self, dbx_path: str, rev: str) -> files.FileMetadata

      Restore an old revision of a file.

      :param dbx_path: The path to save the restored file.
      :param rev: The revision to restore. Old revisions can be listed with
          :meth:`list_revisions`.
      :returns: Metadata of restored file.


   .. method:: download(self, dbx_path: str, local_path: str, sync_event: Optional['SyncEvent'] = None, **kwargs) -> files.FileMetadata

      Downloads file from Dropbox to our local folder.

      :param dbx_path: Path to file on Dropbox or rev number.
      :param local_path: Path to local download destination.
      :param sync_event: If given, the sync event will be updated with the number of
          downloaded bytes.
      :param kwargs: Keyword arguments for Dropbox SDK files_download_to_file.
      :returns: Metadata of downloaded item.


   .. method:: upload(self, local_path: str, dbx_path: str, chunk_size: int = 5 * 10**6, sync_event: Optional['SyncEvent'] = None, **kwargs) -> files.FileMetadata

      Uploads local file to Dropbox.

      :param local_path: Path of local file to upload.
      :param dbx_path: Path to save file on Dropbox.
      :param kwargs: Keyword arguments for Dropbox SDK files_upload.
      :param chunk_size: Maximum size for individual uploads. If larger than 150 MB,
          it will be set to 150 MB.
      :param sync_event: If given, the sync event will be updated with the number of
          downloaded bytes.
      :returns: Metadata of uploaded file.


   .. method:: remove(self, dbx_path: str, **kwargs) -> files.Metadata

      Removes a file / folder from Dropbox.

      :param dbx_path: Path to file on Dropbox.
      :param kwargs: Keyword arguments for Dropbox SDK files_delete_v2.
      :returns: Metadata of deleted item.


   .. method:: remove_batch(self, entries: List[Tuple[str, str]], batch_size: int = 900) -> List[Union[files.Metadata, MaestralApiError]]

      Delete multiple items on Dropbox in a batch job.

      :param entries: List of Dropbox paths and "rev"s to delete. If a "rev" is not
          None, the file will only be deleted if it matches the rev on Dropbox. This
          is not supported when deleting a folder.
      :param batch_size: Number of items to delete in each batch. Dropbox allows
          batches of up to 1,000 items. Larger values will be capped automatically.
      :returns: List of Metadata for deleted items or :class:`errors.SyncError` for
          failures. Results will be in the same order as the original input.


   .. method:: move(self, dbx_path: str, new_path: str, **kwargs) -> files.Metadata

      Moves / renames files or folders on Dropbox.

      :param dbx_path: Path to file/folder on Dropbox.
      :param new_path: New path on Dropbox to move to.
      :param kwargs: Keyword arguments for Dropbox SDK files_move_v2.
      :returns: Metadata of moved item.


   .. method:: make_dir(self, dbx_path: str, **kwargs) -> files.FolderMetadata

      Creates a folder on Dropbox.

      :param dbx_path: Path of Dropbox folder.
      :param kwargs: Keyword arguments for Dropbox SDK files_create_folder_v2.
      :returns: Metadata of created folder.


   .. method:: make_dir_batch(self, dbx_paths: List[str], batch_size: int = 900, **kwargs) -> List[Union[files.Metadata, MaestralApiError]]

      Creates multiple folders on Dropbox in a batch job.

      :param dbx_paths: List of dropbox folder paths.
      :param batch_size: Number of folders to create in each batch. Dropbox allows
          batches of up to 1,000 folders. Larger values will be capped automatically.
      :param kwargs: Keyword arguments for Dropbox SDK files_create_folder_batch.
      :returns: List of Metadata for created folders or SyncError for failures.
          Entries will be in the same order as given paths.


   .. method:: get_latest_cursor(self, dbx_path: str, include_non_downloadable_files: bool = False, **kwargs) -> str

      Gets the latest cursor for the given folder and subfolders.

      :param dbx_path: Path of folder on Dropbox.
      :param include_non_downloadable_files: If ``True``, files that cannot be
          downloaded (at the moment only G-suite files on Dropbox) will be included.
      :param kwargs: Other keyword arguments for Dropbox SDK files_list_folder.
      :returns: The latest cursor representing a state of a folder and its subfolders.


   .. method:: list_folder(self, dbx_path: str, max_retries_on_timeout: int = 4, include_non_downloadable_files: bool = False, **kwargs) -> files.ListFolderResult

      Lists the contents of a folder on Dropbox.

      :param dbx_path: Path of folder on Dropbox.
      :param max_retries_on_timeout: Number of times to try again if Dropbox servers
          do not respond within the timeout. Occasional timeouts may occur for very
          large Dropbox folders.
      :param include_non_downloadable_files: If ``True``, files that cannot be
          downloaded (at the moment only G-suite files on Dropbox) will be included.
      :param kwargs: Other keyword arguments for Dropbox SDK files_list_folder.
      :returns: Content of given folder.


   .. method:: list_folder_iterator(self, dbx_path: str, max_retries_on_timeout: int = 4, include_non_downloadable_files: bool = False, **kwargs) -> Iterator[files.ListFolderResult]

      Lists the contents of a folder on Dropbox. Does the same as :meth:`list_folder`
      but returns an iterator yielding :class:`files.ListFolderResult` instances. The
      number of entries returned in each iteration corresponds to the number of
      entries returned by a single Dropbox API call and will be typically around 500.
      This is useful to save memory when indexing a large number of items.

      :param dbx_path: Path of folder on Dropbox.
      :param max_retries_on_timeout: Number of times to try again if Dropbox servers
          do not respond within the timeout. Occasional timeouts may occur for very
          large Dropbox folders.
      :param include_non_downloadable_files: If ``True``, files that cannot be
          downloaded (at the moment only G-suite files on Dropbox) will be included.
      :param kwargs: Other keyword arguments for Dropbox SDK files_list_folder.
      :returns: Iterator over content of given folder.


   .. method:: flatten_results(results: List[files.ListFolderResult]) -> files.ListFolderResult
      :staticmethod:

      Flattens a list of :class:`files.ListFolderResult` instances to a single
      instance with the cursor of the last entry in the list.

      :param results: List of :class:`files.ListFolderResult` instances.
      :returns: Flattened list folder result.


   .. method:: wait_for_remote_changes(self, last_cursor: str, timeout: int = 40) -> bool

      Waits for remote changes since ``last_cursor``. Call this method after
      starting the Dropbox client and periodically to get the latest updates.

      :param last_cursor: Last to cursor to compare for changes.
      :param timeout: Seconds to wait until timeout. Must be between 30 and 480.
      :returns: ``True`` if changes are available, ``False`` otherwise.


   .. method:: list_remote_changes(self, last_cursor: str) -> files.ListFolderResult

      Lists changes to remote Dropbox since ``last_cursor``. Call this after
      :meth:`wait_for_remote_changes` returns ``True``.

      :param last_cursor: Last to cursor to compare for changes.
      :returns: Remote changes since given cursor.


   .. method:: list_remote_changes_iterator(self, last_cursor: str) -> Iterator[files.ListFolderResult]

      Lists changes to the remote Dropbox since ``last_cursor``. Does the same as
      :meth:`list_remote_changes` but returns an iterator yielding
      :class:`files.ListFolderResult` instances. The number of entries returned in
      each iteration corresponds to the number of entries returned by a single Dropbox
      API call and will be typically around 500. This is useful to save memory when
      indexing a large number of items.

      :param last_cursor: Last to cursor to compare for changes.
      :returns: Iterator over remote changes since given cursor.



.. function:: os_to_maestral_error(exc: OSError, dbx_path: Optional[str] = None, local_path: Optional[str] = None) -> LocalError

   Converts a :class:`OSError` to a :class:`MaestralApiError` and tries to add a
   reasonably informative error title and message.

   .. note::
       The following exception types should not typically be raised during syncing:

       InterruptedError: Python will automatically retry on interrupted connections.
       NotADirectoryError: If raised, this likely is a Maestral bug.
       IsADirectoryError: If raised, this likely is a Maestral bug.

   :param exc: Python Exception.
   :param dbx_path: Dropbox path of file which triggered the error.
   :param local_path: Local path of file which triggered the error.
   :returns: :class:`MaestralApiError` instance or :class:`OSError` instance.


.. function:: fswatch_to_maestral_error(exc: OSError) -> LocalError

   Converts a :class:`OSError` when starting a file system watch to a
   :class:`MaestralApiError` and tries to add a reasonably informative error title and
   message. Error messages and types differ from :func:`os_to_maestral_error`.

   :param exc: Python Exception.
   :returns: :class:`MaestralApiError` instance or :class:`OSError` instance.


.. function:: dropbox_to_maestral_error(exc: exceptions.DropboxException, dbx_path: Optional[str] = None, local_path: Optional[str] = None) -> MaestralApiError

   Converts a Dropbox SDK exception to a :class:`MaestralApiError` and tries to add a
   reasonably informative error title and message.

   :param exc: :class:`dropbox.exceptions.DropboxException` instance.
   :param dbx_path: Dropbox path of file which triggered the error.
   :param local_path: Local path of file which triggered the error.
   :returns: :class:`MaestralApiError` instance.


