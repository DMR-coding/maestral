:orphan:

:mod:`maestral.config`
======================

.. py:module:: maestral.config


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   base/index.rst
   main/index.rst
   user/index.rst


Package Contents
----------------


Functions
~~~~~~~~~

.. autoapisummary::

   maestral.config.get_conf_path
   maestral.config.list_configs
   maestral.config.MaestralConfig
   maestral.config.MaestralState


.. function:: get_conf_path(subfolder: Optional[str] = None, filename: Optional[str] = None, create: bool = True) -> str

   Returns the default config path for the platform. This will be:

       - macOS: '~/Library/Application Support/<subfolder>/<filename>.'
       - Linux: 'XDG_CONFIG_HOME/<subfolder>/<filename>'
       - other: '~/.config/<subfolder>/<filename>'

   :param subfolder: The subfolder for the app.
   :param filename: The filename to append for the app.
   :param create: If ``True``, the folder '<subfolder>' will be created on-demand.


.. function:: list_configs() -> List[str]

   Lists all maestral configs.

   :returns: A list of all currently existing config files.


.. function:: MaestralConfig(config_name: str) -> UserConfig

   Returns existing config instance or creates a new one.

   :param config_name: Name of maestral configuration to run. A new config file will
       be created if none exists for the given config_name.
   :return: Maestral config instance which saves any changes to the drive.


.. function:: MaestralState(config_name: str) -> UserConfig

   Returns existing state instance or creates a new one.

   :param config_name: Name of maestral configuration to run. A new state file will
       be created if none exists for the given config_name.
   :return: Maestral state instance which saves any changes to the drive.


