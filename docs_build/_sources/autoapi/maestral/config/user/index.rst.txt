:mod:`maestral.config.user`
===========================

.. py:module:: maestral.config.user

.. autoapi-nested-parse::

   This module provides user configuration file management and is mostly copied from the
   config module of the Spyder IDE.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   maestral.config.user.DefaultsConfig
   maestral.config.user.UserConfig



.. py:class:: DefaultsConfig(path: str, name: str, suffix: str)

   Bases: :class:`configparser.ConfigParser`

   Class used to save defaults to a file and as base class for UserConfig.

   .. method:: save(self) -> None

      Save config into the associated file.


   .. method:: get_config_fpath(self) -> str

      Return the ini file where this configuration is stored.


   .. method:: set_defaults(self, defaults: DefaultsType) -> None

      Set default values and save to defaults folder location.



.. py:class:: UserConfig(path: str, name: str, defaults: InputDefaultsType = None, load: bool = True, version: str = '0.0.0', backup: bool = False, remove_obsolete: bool = False, suffix: str = '.ini')

   Bases: :class:`maestral.config.user.DefaultsConfig`

   UserConfig class, based on ConfigParser.

   :param path: Configuration file will be saved to this path.
   :type path: str
   :param defaults: Dictionary containing options *or* list of tuples (sec_name, options)
   :type defaults: {} or [(str, {}),]
   :param load: If a previous configuration file is found, load will take the values
                from this existing file, instead of using default values.
   :type load: bool
   :param version: version of the configuration file in 'major.minor.micro' format.
   :type version: str
   :param backup: A backup will be created on version changes and on initial setup.
   :type backup: bool
   :param remove_obsolete: If `True`, values that were removed from the configuration on version
                           change, are removed from the saved configuration file.
   :type remove_obsolete: bool

   .. rubric:: Notes

   The 'get' and 'set' arguments number and type differ from the reimplemented
   methods. 'defaults' is an attribute and not a method.

   .. method:: get_previous_config_fpath(self) -> str

      Return the last configuration file used if found.


   .. method:: get_config_fpath_from_version(self, version: Optional[str] = None) -> str

      Return the configuration path for given version.

      If no version is provided, it returns the current file path.


   .. method:: get_backup_fpath_from_version(self, version: Optional[str] = None, old_version: Optional[str] = None) -> str

      Get backup location based on version.

      `old_version` can be used for checking compatibility whereas `version`
      relates to adding the version to the file name.

      To be reimplemented if versions changed backup location.


   .. method:: get_defaults_path_name_from_version(self, old_version: Optional[str] = None) -> Tuple[str, str]

      Get defaults location based on version.

      To be reimplemented if versions changed defaults location.


   .. method:: get_defaults_fpath_from_version(self, old_version: str = None) -> str

      Get defaults location based on version.

      To be reimplemented if versions changed defaults location.


   .. method:: apply_configuration_patches(self, old_version: str = None) -> None

      Apply any patch to configuration values on version changes.

      To be reimplemented if patches to configuration values are needed.


   .. method:: get_version(self, version: str = '0.0.0') -> str

      Return configuration (not application!) version.


   .. method:: set_version(self, version: str = '0.0.0', save: bool = True) -> None

      Set configuration (not application!) version.


   .. method:: reset_to_defaults(self, save: bool = True, section: Optional[str] = None) -> None

      Reset config to Default values.


   .. method:: set_as_defaults(self) -> None

      Set defaults from the current config.


   .. method:: get_default(self, section: str, option: str) -> Any

      Get default value for a given `section` and `option`.

      This is useful for type checking in `get` method.


   .. method:: get(self, section, option, default: Any = NoDefault) -> Any

      Get an option.

      :param section: Section name. If `None` is provide use the default section name.
      :type section: str
      :param option: Option name for `section`.
      :type option: str
      :param default: Default value (if not specified, an exception will be raised if
                      option doesn't exist).


   .. method:: set_default(self, section: str, option: str, default_value: Any) -> None

      Set Default value for a given `section`, `option`.

      If no defaults exist, no default is created. To be able to set
      defaults, a call to set_as_defaults is needed to create defaults
      based on current values.


   .. method:: set(self, section: str, option: str, value: Any, save: bool = True) -> None

      Set an `option` on a given `section`.

      If section is None, the `option` is added to the default section.


   .. method:: remove_section(self, section: str) -> bool

      Remove `section` and all options within it.


   .. method:: remove_option(self, section: str, option: str) -> bool

      Remove `option` from `section`.


   .. method:: cleanup(self) -> None

      Remove files associated with config and reset to defaults.



