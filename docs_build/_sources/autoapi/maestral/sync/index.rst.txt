:mod:`maestral.sync`
====================

.. py:module:: maestral.sync

.. autoapi-nested-parse::

   This module contains the main syncing functionality.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   maestral.sync.Conflict
   maestral.sync.SyncDirection
   maestral.sync.SyncStatus
   maestral.sync.ItemType
   maestral.sync.ChangeType
   maestral.sync.FSEventHandler
   maestral.sync.PersistentStateMutableSet
   maestral.sync.SyncEvent
   maestral.sync.IndexEntry
   maestral.sync.HashCacheEntry
   maestral.sync.SyncEngine
   maestral.sync.SyncMonitor



Functions
~~~~~~~~~

.. autoapisummary::

   maestral.sync.download_worker
   maestral.sync.download_worker_added_item
   maestral.sync.upload_worker
   maestral.sync.startup_worker
   maestral.sync.exc_info_tuple
   maestral.sync.get_dest_path
   maestral.sync.split_moved_event
   maestral.sync.entries_repr
   maestral.sync.throttled_log
   maestral.sync.cpu_usage_percent
   maestral.sync.check_connection


.. py:class:: Conflict

   Bases: :class:`enum.Enum`

   Enumeration of sync conflict types.

   :cvar RemoteNewer: Remote item is newer.
   :cvar Conflict: Conflict.
   :cvar Identical: Items are identical.
   :cvar LocalNewerOrIdentical: Local item is newer or identical.


.. py:class:: SyncDirection

   Bases: :class:`enum.Enum`

   Enumeration of sync direction.

   :cvar Up: Upload.
   :cvar Down: Download.


.. py:class:: SyncStatus

   Bases: :class:`enum.Enum`

   Enumeration of sync status values.

   :cvar Queued: Queued for syncing.
   :cvar Syncing: Sync in progress.
   :cvar Done: Sync successfully completed.
   :cvar Failed: Sync failed.
   :cvar Skipped: Item was already in sync.


.. py:class:: ItemType

   Bases: :class:`enum.Enum`

   Enumeration of SyncEvent types.

   :cvar File: File type.
   :cvar Folder: Folder type.
   :cvar Unknown: Item type could not be determined. This can occur for remote deleted
       events, see issue #198.


.. py:class:: ChangeType

   Bases: :class:`enum.Enum`

   Enumeration of SyncEvent change types.

   :cvar Added: An added file or folder.
   :cvar Removed: A deleted file or folder.
   :cvar Moved: A moved file or folder.
   :cvar Modified: A modified file. Does not apply to folders.


.. py:class:: FSEventHandler(syncing: Event, startup: Event)

   Bases: :class:`watchdog.events.FileSystemEventHandler`

   Handles captured file events and adds them to :class:`SyncEngine`'s file event queue
   to be uploaded by :meth:`upload_worker`. This acts as a translation layer between
   :class:`watchdog.Observer` and :class:`SyncEngine`.

   :param syncing: Set when syncing is running.
   :param startup: Set when startup is running.

   :cvar float ignore_timeout: Timeout in seconds after which ignored paths will be
       discarded.

   .. method:: ignore(self, *events: FileSystemEvent, recursive: bool = True) -> Iterator[None]

      A context manager to ignore file events. Once a matching event has been
      registered, further matching events will no longer be ignored unless
      ``recursive`` is ``True``. If no matching event has occurred before leaving the
      context, the event will be ignored for ``ignore_timeout`` sec after leaving then
      context and then discarded. This accounts for possible delays in the emission of
      local file system events.

      This context manager is used to filter out file system events caused by maestral
      itself, for instance during a download or when moving a conflict.

      :param events: Local events to ignore.
      :param recursive: If ``True``, all child events of a directory event will be
          ignored as well. This parameter will be ignored for file events.


   .. method:: on_any_event(self, event: FileSystemEvent) -> None

      Callback on any event. Checks if the system file event should be ignored. If
      not, adds it to the queue for events to upload. If syncing is paused or stopped,
      all events will be ignored.

      :param event: Watchdog file event.



.. py:class:: PersistentStateMutableSet(config_name: str, section: str, option: str)

   Bases: :class:`collections.abc.MutableSet`

   A wrapper for a list of Python types in the saved state that implements a MutableSet
   interface.

   :param config_name: Name of config (determines name of state file).
   :param section: Section name in state file.
   :param option: Option name in state file.

   .. method:: add(self, entry: Any) -> None

      Add an element.


   .. method:: discard(self, entry: Any) -> None

      Remove an element.  Do not raise an exception if absent.


   .. method:: clear(self) -> None

      Clears all elements.



.. py:class:: SyncEvent

   Bases: :class:`Base`

   Represents a file or folder change in the sync queue. This is used to abstract the
   :class:`watchdog.events.FileSystemEvent` created for local changes and the
   :class:`dropbox.files.Metadata` created for remote changes. All arguments are used
   to construct instance attributes and some attributes may not be set for all event
   types. Note that some instance attributes depend on the state of the Maestral
   instance, e.g., :attr:`local_path` will depend on the current path of the local
   Dropbox folder. They may therefore become invalid after sync sessions.

   The convenience methods :meth:`from_dbx_metadata` and :meth:`from_file_system_event`
   should be used to properly construct a SyncEvent from Dropbox Metadata or a local
   FileSystemEvent, respectively.

   :param direction: Direction of the sync: upload or download.
   :param item_type: The item type: file or folder or undetermined (in rare cases where
       we cannot determine the type of a deleted file).
   :param sync_time: The time the SyncEvent was registered.
   :param dbx_id: A unique dropbox ID for the file or folder. Will only be set for
       download events which are not deletions.
   :param dbx_path: Dropbox path of the item to sync. If the sync represents a move
       operation, this will be the destination path. Follows the casing from server.
   :param dbx_path_from: Dropbox path that this item was moved from. Will only be set
       if ``change_type`` is ``ChangeType.Moved``. Follows the casing from server.
   :param local_path: Local path of the item to sync. If the sync represents a move
       operation, this will be the destination path. Follows the casing from server.
   :param local_path_from: Local path that this item was moved from. Will only be set
       if ``change_type`` is ``ChangeType.Moved``. Follows the casing from server.
   :param rev: The file revision. Will only be set for remote changes. Will be
       'folder' for folders and None for deletions.
   :param content_hash: A hash representing the file content. Will be 'folder' for
       folders and None for deleted items. Set for both local and remote changes.
   :param change_type: The type of change: deleted, moved, added or changed. Remote
       SyncEvents currently do not generate moved events but are reported as deleted
       and added at the new location.
   :param change_time: The time of the change: Local ctime or remote client_modified
       time for files. None for folders or for remote deletions. Note that the
       client_modified may not be reliable as it is set by other clients and not
       verified.
   :param change_dbid: The Dropbox ID of the account which performed the changes. This
       may not be set for added folders or deletions on the server.
   :param change_user_name: The user name corresponding to ``change_dbid``, if the
       account still exists. This field may not be set for performance reasons.
   :param status: Field containing the sync status: queued, syncing, done, failed,
       skipped (item was already in sync) or aborted (by the user).
   :param size: Size of the item in bytes. Always zero for folders.
   :param completed: File size in bytes which has already been uploaded or downloaded.
       Always zero for folders.

   :ivar id: A unique identifier of the SyncEvent.
   :ivar change_time_or_sync_time: Change time when available, otherwise sync time.
       This can be used for sorting or user information purposes.

   .. method:: is_file(self) -> bool
      :property:

      Returns True for file changes


   .. method:: is_directory(self) -> bool
      :property:

      Returns True for folder changes


   .. method:: is_added(self) -> bool
      :property:

      Returns True for added items


   .. method:: is_moved(self) -> bool
      :property:

      Returns True for moved items


   .. method:: is_changed(self) -> bool
      :property:

      Returns True for changed file contents


   .. method:: is_deleted(self) -> bool
      :property:

      Returns True for deleted items


   .. method:: is_upload(self) -> bool
      :property:

      Returns True for changes to upload


   .. method:: is_download(self) -> bool
      :property:

      Returns True for changes to download


   .. method:: from_dbx_metadata(cls, md: Metadata, sync_engine: SyncEngine) -> 'SyncEvent'
      :classmethod:

      Initializes a SyncEvent from the given Dropbox metadata.

      :param md: Dropbox Metadata.
      :param sync_engine: SyncEngine instance.
      :returns: An instance of this class with attributes populated from the given
          Dropbox Metadata.


   .. method:: from_file_system_event(cls, event: FileSystemEvent, sync_engine: SyncEngine) -> 'SyncEvent'
      :classmethod:

      Initializes a SyncEvent from the given local file system event.

      :param event: Local file system event.
      :param sync_engine: SyncEngine instance.
      :returns: An instance of this class with attributes populated from the given
          SyncEvent.



.. py:class:: IndexEntry

   Bases: :class:`Base`

   Represents an entry in our local sync index. All arguments are used to construct
   instance attributes. All arguments apart from ```content_hash`` and
   ``content_hash_ctime`` are required.

   :param dbx_path_cased: Dropbox path of the item, correctly cased.
   :param dbx_path_lower: Dropbox path of the item in lower case. This acts as a
       primary key for the SQL database since there can only be one entry per case-
       insensitive Dropbox path.
   :param dbx_id: A unique dropbox ID for the file or folder.
   :param item_type: The item type: file or folder.
   :param last_sync: The last time a local change was uploaded. Should be the ctime of
       the local file or folder.
   :param rev: The file revision. Will be 'folder' for folders.
   :param content_hash: A hash representing the file content. Will be 'folder' for
       folders. May be None if not yet calculated.
   :param content_hash_ctime: The ctime for which the content_hash was calculated. If
       this is older than the current ctime, the content_hash will be invalid and has
       to recalculated.

   .. method:: is_file(self) -> bool
      :property:

      Returns True for file changes


   .. method:: is_directory(self) -> bool
      :property:

      Returns True for folder changes



.. py:class:: HashCacheEntry

   Bases: :class:`Base`

   An entry in our cache of content hashes.

   :param local_path: The local path for which the hash is stored.
   :param hash_str: The content hash. 'folder' for folders.
   :param mtime: The mtime of the item just before the hash was computed. When the
       current ctime is newer, the hash_str will need to be recalculated.


.. py:class:: SyncEngine(client: DropboxClient, fs_events_handler: FSEventHandler)

   Class that contains methods to sync local file events with Dropbox and vice versa.

   :param client: Dropbox API client instance.
   :param fs_events_handler: File system event handler to inform us of local events.

   .. method:: dropbox_path(self) -> str
      :property:

      Path to local Dropbox folder, as loaded from the config file. Before changing
      :attr:`dropbox_path`, make sure that syncing is paused. Move the dropbox folder
      to the new location before resuming the sync. Changes are saved to the config
      file.


   .. method:: database_path(self) -> str
      :property:

      Path SQLite database.


   .. method:: file_cache_path(self) -> str
      :property:

      Path to cache folder for temporary files (read only). The cache folder
      '.maestral.cache' is located inside the local Dropbox folder to prevent file
      transfer between different partitions or drives during sync.


   .. method:: excluded_items(self) -> List[str]
      :property:

      List of all files and folders excluded from sync. Changes are saved to the
      config file. If a parent folder is excluded, its children will automatically be
      removed from the list. If only children are given but not the parent folder, any
      new items added to the parent will be synced. Change this property *before*
      downloading newly included items or deleting excluded items.


   .. method:: clean_excluded_items_list(folder_list: List[str]) -> List[str]
      :staticmethod:

      Removes all duplicates and children of excluded items from the excluded items
      list.

      :param folder_list: Dropbox paths to exclude.
      :returns: Cleaned up items.


   .. method:: max_cpu_percent(self) -> float
      :property:

      Maximum CPU usage for parallel downloads or uploads in percent of the total
      available CPU time per core. Individual workers in a thread pool will pause
      until the usage drops below this value. Tasks in the main thread such as
      indexing file changes may still use more CPU time. Setting this to 200% means
      that two full logical CPU core can be used.


   .. method:: remote_cursor(self) -> str
      :property:

      Cursor from last sync with remote Dropbox. The value is updated and saved to
      the config file on every successful download of remote changes.


   .. method:: local_cursor(self) -> float
      :property:

      Time stamp from last sync with remote Dropbox. The value is updated and saved
      to the config file on every successful upload of local changes.


   .. method:: last_change(self) -> float
      :property:

      The time stamp of the last file change or 0.0 if there are no file changes in
      our history.


   .. method:: last_reindex(self) -> float
      :property:

      Time stamp of last full indexing. This is used to determine when the next
      full indexing should take place.


   .. method:: history(self) -> List[SyncEvent]
      :property:

      A list of the last SyncEvents in our history. History will be kept for the
      interval specified by the config value``keep_history`` (defaults to two weeks)
      and at most ``_max_history`` events will be returned (defaults to 1,000).


   .. method:: clear_sync_history(self) -> None

      Clears the sync history.


   .. method:: get_index(self) -> List[IndexEntry]

      Returns a copy of the local index of synced files and folders.

      :returns: List of index entries.


   .. method:: iter_index(self) -> Iterator[IndexEntry]

      Returns an iterator over the local index of synced files and folders.

      :returns: Iterator over index entries.


   .. method:: get_local_rev(self, dbx_path: str) -> Optional[str]

      Gets revision number of local file.

      :param dbx_path: Dropbox path.
      :returns: Revision number as str or ``None`` if no local revision number has
          been saved.


   .. method:: get_last_sync(self, dbx_path: str) -> float

      Returns the timestamp of last sync for an individual path.

      :param dbx_path: Dropbox path.
      :returns: Time of last sync.


   .. method:: get_index_entry(self, dbx_path: str) -> Optional[IndexEntry]

      Gets the index entry for the given Dropbox path.

      :param dbx_path: Dropbox path.
      :returns: Index entry or ``None`` if no entry exists for the given path.


   .. method:: get_local_hash(self, local_path: str) -> Optional[str]

      Computes content hash of a local file.

      :param local_path: Absolute path on local drive.
      :returns: Content hash to compare with Dropbox's content hash, or 'folder' if
          the path points to a directory. ``None`` if there is nothing at the path.


   .. method:: save_local_hash(self, local_path: str, hash_str: Optional[str], mtime: Optional[float]) -> None

      Save the content hash for a file in our cache.

      :param local_path: Absolute path on local drive.
      :param hash_str: Hash string to save. If None, the existing cache entry will be
          deleted.
      :param mtime: Mtime of the file when the hash was computed.


   .. method:: clear_hash_cache(self) -> None

      Clears the sync history.


   .. method:: update_index_from_sync_event(self, event: SyncEvent) -> None

      Updates the local index from a SyncEvent.

      :param event: SyncEvent from download.


   .. method:: update_index_from_dbx_metadata(self, md: Metadata) -> None

      Updates the local index from Dropbox metadata.

      :param md: Dropbox metadata.


   .. method:: remove_path_from_index(self, dbx_path: str) -> None

      Removes any local index entries for the given path and all its children.

      :param dbx_path: Dropbox path.


   .. method:: clear_index(self) -> None

      Clears the revision index.


   .. method:: mignore_path(self) -> str
      :property:

      Path to mignore file on local drive (read only).


   .. method:: mignore_rules(self) -> pathspec.PathSpec
      :property:

      List of mignore rules following git wildmatch syntax (read only).


   .. method:: is_case_sensitive(self) -> bool
      :property:

      Returns ``True`` if the local Dropbox folder is located on a partition with a
      case-sensitive file system, ``False`` otherwise.


   .. method:: ensure_dropbox_folder_present(self) -> None

      Checks if the Dropbox folder still exists where we expect it to be.

      :raises: :class:`errors.DropboxDeletedError`


   .. method:: clean_cache_dir(self) -> None

      Removes all items in the cache directory.


   .. method:: correct_case(self, dbx_path: str) -> str

      Converts a Dropbox path with correctly cased basename to a fully cased path.
      This is because Dropbox metadata guarantees the correct casing for the basename
      only. In practice, casing of parent directories is often incorrect.
      This is done by retrieving the correct casing of the dirname, either from our
      cache, our database or from Dropbox servers.

      Performance may vary significantly with the number of parent folders:

      1) If the parent directory is already in our cache, performance is O(1).
      2) If the parent directory is already in our sync index, performance is O(1) but
         slower than the first case because it requires a SQLAlchemy query.
      3) If the parent directory is unknown to us, its metadata (including the correct
         casing of directory's basename) is queried from Dropbox. This is used to
         construct a correctly cased path by calling :meth:`correct_case` again. At
         best, performance will be of O(2) if the parent directory is known to us, at
         worst if will be of order O(n) involving queries to Dropbox servers for each
         parent directory.

      When running :meth:`correct_case` on a large tree of paths, it is therefore best
      to do so in hierarchical order.

      :param dbx_path: Dropbox path with correctly cased basename, as provided by
          ``Metadata.path_display`` or ``Metadata.name``.
      :returns: Correctly cased Dropbox path.


   .. method:: to_dbx_path(self, local_path: str) -> str

      Converts a local path to a path relative to the Dropbox folder. Casing of the
      given ``local_path`` will be preserved.

      :param local_path: Absolute path on local drive.
      :returns: Relative path with respect to Dropbox folder.
      :raises: :class:`ValueError` the path lies outside of the local Dropbox folder.


   .. method:: to_local_path_from_cased(self, dbx_path_cased: str) -> str

      Converts a correctly cased Dropbox path to the corresponding local path. This is
      more efficient than :meth:`to_local_path` which accepts uncased paths.

      :param dbx_path_cased: Path relative to Dropbox folder, correctly cased.
      :returns: Corresponding local path on drive.


   .. method:: to_local_path(self, dbx_path: str) -> str

      Converts a Dropbox path to the corresponding local path. Only the basename must
      be correctly cased. This is slower than :meth:`to_local_path_from_cased`.

      :param dbx_path: Path relative to Dropbox folder, must be correctly cased in its
          basename.
      :returns: Corresponding local path on drive.


   .. method:: has_sync_errors(self) -> bool

      Returns ``True`` in case of sync errors, ``False`` otherwise.


   .. method:: clear_sync_error(self, local_path: Optional[str] = None, dbx_path: Optional[str] = None) -> None

      Clears all sync errors for ``local_path`` or ``dbx_path``.

      :param local_path: Absolute path on local drive.
      :param dbx_path: Path relative to Dropbox folder.


   .. method:: clear_sync_errors(self) -> None

      Clears all sync errors.


   .. method:: is_excluded(path) -> bool
      :staticmethod:

      Checks if a file is excluded from sync. Certain file names are always excluded
      from syncing, following the Dropbox support article:

      https://help.dropbox.com/installs-integrations/sync-uploads/files-not-syncing

      This includes file system files such as 'desktop.ini' and '.DS_Store' and some
      temporary files as well as caches used by Dropbox or Maestral. `is_excluded`
      accepts both local and Dropbox paths.

      :param path: Path of item. Can be both a local or Dropbox paths.
      :returns: Whether the path is excluded from syncing.


   .. method:: is_excluded_by_user(self, dbx_path: str) -> bool

      Check if file has been excluded through "selective sync" by the user.

      :param dbx_path: Path relative to Dropbox folder.
      :returns: Whether the path is excluded from download syncing by the user.


   .. method:: is_mignore(self, event: SyncEvent) -> bool

      Check if local file change has been excluded by an mignore pattern.

      :param event: SyncEvent for local file event.
      :returns: Whether the path is excluded from upload syncing by the user.


   .. method:: busy(self) -> bool

      Checks if we are currently syncing.

      :returns: ``True`` if :attr:`sync_lock` cannot be acquired, ``False`` otherwise.


   .. method:: upload_local_changes_while_inactive(self) -> None

      Collects changes while sync has not been running and uploads them to Dropbox.
      Call this method when resuming sync.


   .. method:: wait_for_local_changes(self, timeout: float = 40, delay: float = 1) -> Tuple[List[SyncEvent], float]

      Waits for local file changes. Returns a list of local changes with at most one
      entry per path.

      :param timeout: If no changes are detected within timeout (sec), an empty list
          is returned.
      :param delay: Delay in sec to wait for subsequent changes before returning.
      :returns: (list of sync times events, time_stamp)


   .. method:: apply_local_changes(self, sync_events: List[SyncEvent], local_cursor: float) -> List[SyncEvent]

      Applies locally detected changes to the remote Dropbox. Changes which should be
      ignored (mignore or always ignored files) are skipped.

      :param sync_events: List of local file system events.
      :param local_cursor: Time stamp of last event in ``events``.


   .. method:: get_remote_folder(self, dbx_path: str = '/') -> bool

      Gets all files/folders from Dropbox and writes them to the local folder
      :attr:`dropbox_path`. Call this method on first run of the Maestral. Indexing
      and downloading may take several minutes, depending on the size of the user's
      Dropbox folder.

      :param dbx_path: Path relative to Dropbox folder. Defaults to root ('/').
      :returns: Whether download was successful.


   .. method:: get_remote_item(self, dbx_path: str) -> bool

      Downloads a remote file or folder and updates its local rev. If the remote item
      no longer exists, the corresponding local item will be deleted. Given paths will
      be added to the (persistent) pending_downloads list for the duration of the
      download so that they will be resumed in case Maestral is terminated during the
      download. If ``dbx_path`` refers to a folder, the download will be handled by
      :meth:`get_remote_folder`. If it refers to a single file, the download will be
      performed by :meth:`_create_local_entry`.

      This method can be used to fetch individual items outside of the regular sync
      cycle, for instance when including a previously excluded file or folder.

      :param dbx_path: Path relative to Dropbox folder.
      :returns: Whether download was successful.


   .. method:: wait_for_remote_changes(self, last_cursor: str, timeout: int = 40, delay: float = 2) -> bool

      Blocks until changes to the remote Dropbox are available.

      :param last_cursor: Cursor form last sync.
      :param timeout: Timeout in seconds before returning even if there are no
          changes. Dropbox adds random jitter of up to 90 sec to this value.
      :param delay: Delay in sec to wait for subsequent changes that may be
          duplicates. This delay is typically only necessary folders are shared /
          un-shared with other Dropbox accounts.


   .. method:: list_remote_changes(self, last_cursor: str) -> Tuple[List[SyncEvent], str]

      Lists remote changes since the last download sync.

      :param last_cursor: Cursor from last download sync.
      :returns: Tuple with remote changes and corresponding cursor


   .. method:: list_remote_changes_iterator(self, last_cursor: str) -> Iterator[Tuple[List[SyncEvent], Optional[str]]]

      Lists remote changes since the last download sync. Works the same as
      :meth:`list_remote_changes` but returns an iterator over remote changes. Only
      the last result will have a valid cursor which is not None.

      :param last_cursor: Cursor from last download sync.
      :returns: Iterator yielding tuples with remote changes and corresponding cursor.


   .. method:: apply_remote_changes(self, sync_events: List[SyncEvent], cursor: Optional[str]) -> List[SyncEvent]

      Applies remote changes to local folder. Call this on the result of
      :meth:`list_remote_changes`. The saved cursor is updated after a set of changes
      has been successfully applied. Entries in the local index are created after
      successful completion.

      :param sync_events: List of remote changes.
      :param cursor: Remote cursor corresponding to changes. Take care to only pass
          cursors which represent the state of the entire Dropbox. Pass None instead
          if you are only downloading a subset of changes.
      :returns: List of changes that were made to local files and bool indicating if
          all download syncs were successful.


   .. method:: notify_user(self, sync_events: List[SyncEvent]) -> None

      Shows a desktop notification for the given file changes.

      :param sync_events: List of SyncEvents from download sync.


   .. method:: has_unsynced_changes(self, local_path: str) -> bool

      Checks if a local item has any unsynced changes. This is by comparing its ctime
      to the ``last_sync`` time saved in our index. In case of folders, we recursively
      check the ctime of children.

      :param local_path: Local path of item to check.
      :returns: Whether the local item has unsynced changes.


   .. method:: rescan(self, local_path: str) -> None

      Forces a rescan of a local path: schedules created events for every folder,
      modified events for every file and deleted events for every deleted item
      (compared to our index).

      :param local_path: Path to rescan.



.. function:: download_worker(sync: SyncEngine, syncing: Event, running: Event, connected: Event) -> None

   Worker to sync changes of remote Dropbox with local folder.

   :param sync: Instance of :class:`SyncEngine`.
   :param syncing: Event that indicates if workers are running or paused.
   :param running: Event to shutdown local file event handler and worker threads.
   :param connected: Event that indicates if we can connect to Dropbox.


.. function:: download_worker_added_item(sync: SyncEngine, syncing: Event, running: Event, connected: Event, added_item_queue: Queue[str]) -> None

   Worker to download items which have been newly included in sync.

   :param sync: Instance of :class:`SyncEngine`.
   :param syncing: Event that indicates if workers are running or paused.
   :param running: Event to shutdown local file event handler and worker threads.
   :param connected: Event that indicates if we can connect to Dropbox.
   :param added_item_queue: Queue with newly added items to download. Entries are
       Dropbox paths.


.. function:: upload_worker(sync: SyncEngine, syncing: Event, running: Event, connected: Event) -> None

   Worker to sync local changes to remote Dropbox.

   :param sync: Instance of :class:`SyncEngine`.
   :param syncing: Event that indicates if workers are running or paused.
   :param running: Event to shutdown local file event handler and worker threads.
   :param connected: Event that indicates if we can connect to Dropbox.


.. function:: startup_worker(sync: SyncEngine, syncing: Event, running: Event, connected: Event, startup: Event, paused_by_user: Event) -> None

   Worker to sync local changes to remote Dropbox.

   :param sync: Instance of :class:`SyncEngine`.
   :param syncing: Event that indicates if workers are running or paused.
   :param running: Event to shutdown local file event handler and worker threads.
   :param connected: Event that indicates if we can connect to Dropbox.
   :param startup: Set when we should run startup routines.
   :param paused_by_user: Set when syncing has been paused by the user.


.. py:class:: SyncMonitor(client: DropboxClient)

   Class to sync changes between Dropbox and a local folder. It creates five threads:
   `observer` to retrieve local file system events, `startup_thread` to carry out any
   startup jobs such as initial syncs, `upload_thread` to upload local changes to
   Dropbox, and `download_thread` to query for and download remote changes.

   :param client: The Dropbox API client, a wrapper around the Dropbox Python SDK.

   .. method:: activity(self) -> List[SyncEvent]
      :property:

      Returns a list all items queued for or currently syncing.


   .. method:: history(self) -> List[SyncEvent]
      :property:

      A list of the last SyncEvents in our history. History will be kept for the
      interval specified by the config value``keep_history`` (defaults to two weeks)
      and at most ``_max_history`` events will be returned (defaults to 1,000).


   .. method:: idle_time(self) -> float
      :property:

      Returns the idle time in seconds since the last file change or since startup
      if there haven't been any changes in our current session.


   .. method:: start(self) -> None

      Creates observer threads and starts syncing.


   .. method:: pause(self) -> None

      Pauses syncing.


   .. method:: resume(self) -> None

      Checks for changes while idle and starts syncing.


   .. method:: stop(self) -> None

      Stops syncing and destroys worker threads.


   .. method:: connection_monitor(self) -> None

      Monitors the connection to Dropbox servers. Pauses syncing when the connection
      is lost and resumes syncing when reconnected and syncing has not been paused by
      the user.


   .. method:: reset_sync_state(self) -> None

      Resets all saved sync state.


   .. method:: rebuild_index(self) -> None

      Rebuilds the rev file by comparing remote with local files and updating rev
      numbers from the Dropbox server. Files are compared by their content hashes and
      conflicting copies are created if the contents differ. File changes during the
      rebuild process will be queued and uploaded once rebuilding has completed.

      Rebuilding will be performed asynchronously.



.. function:: exc_info_tuple(exc: BaseException) -> ExecInfoType

   Creates an exc-info tuple from an exception.


.. function:: get_dest_path(event: FileSystemEvent) -> str

   Returns the dest_path of a file system event if present (moved events only)
   otherwise returns the src_path (which is also the "destination").

   :param event: Watchdog file system event.
   :returns: Destination path for moved event, source path otherwise.


.. function:: split_moved_event(event: Union[FileMovedEvent, DirMovedEvent]) -> Tuple[FileSystemEvent, FileSystemEvent]

   Splits a FileMovedEvent or DirMovedEvent into "deleted" and "created" events of the
   same type. A new attribute ``move_id`` is added to both instances.

   :param event: Original event.
   :returns: Tuple of deleted and created events.


.. function:: entries_repr(entries: List[Metadata]) -> str

   Generates a nicely formatted string repr from a list of Dropbox metadata.

   :param entries: List of Dropbox metadata.
   :returns: String representation of the list.


.. function:: throttled_log(log: logging.Logger, msg: str, level: int = logging.INFO, limit: int = 2) -> None

   Emits the given log message only if the previous message was emitted more than
   ``limit`` seconds ago. This can be used to prevent spamming a log with frequent
   updates.

   :param log: Logger used to emit the message.
   :param msg: Log message.
   :param level: Log level.
   :param limit: Minimum time between log messages.


.. function:: cpu_usage_percent(interval: float = 0.1) -> float

   Returns a float representing the CPU utilization of the current process as a
   percentage. This duplicates the similar method from psutil to avoid the psutil
   dependency.

   Compares process times to system CPU times elapsed before and after the interval
   (blocking). It is recommended for accuracy that this function be called with an
   interval of at least 0.1 sec.

   A value > 100.0 can be returned in case of processes running multiple threads on
   different CPU cores. The returned value is explicitly NOT split evenly between all
   available logical CPUs. This means that a busy loop process running on a system with
   2 logical CPUs will be reported as having 100% CPU utilization instead of 50%.

   :param interval: Interval in sec between comparisons of CPU times.
   :returns: CPU usage during interval in percent.


.. function:: check_connection(hostname: str) -> bool

   A low latency check for an internet connection.

   :param hostname: Hostname to use for connection check.
   :returns: Connection availability.


