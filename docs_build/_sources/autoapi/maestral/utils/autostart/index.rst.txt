:mod:`maestral.utils.autostart`
===============================

.. py:module:: maestral.utils.autostart

.. autoapi-nested-parse::

   This module handles starting the maestral daemon on user login and supports multiple
   platform specific backends such as launchd or systemd.

   Note that launchd agents will not show as "login items" in macOS system preferences. As
   a result, the user does not have a convenient UI to remove Maestral autostart entries
   manually outside of Maestral itself. Login items however only support app bundles and
   provide no option to pass command line arguments to the app. They would therefore
   neither support pip installed packages or multiple configurations.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   maestral.utils.autostart.SupportedImplementations
   maestral.utils.autostart.AutoStartBase
   maestral.utils.autostart.AutoStartSystemd
   maestral.utils.autostart.AutoStartLaunchd
   maestral.utils.autostart.AutoStartXDGDesktop
   maestral.utils.autostart.AutoStart



Functions
~~~~~~~~~

.. autoapisummary::

   maestral.utils.autostart.get_available_implementation
   maestral.utils.autostart.get_maestral_command_path


.. py:class:: SupportedImplementations

   Bases: :class:`enum.Enum`

   Enumeration of supported implementations.

   :cvar str systemd: macOS systemd.
   :cvar str launchd: Linux launchd.
   :cvar str xdg_desktop: Linux autostart xdg desktop entries.


.. py:class:: AutoStartBase

   Base class for autostart backends.

   .. method:: enable(self) -> None
      :abstractmethod:

      Enable autostart. Must be implemented in subclass.


   .. method:: disable(self) -> None
      :abstractmethod:

      Disable autostart. Must be implemented in subclass.


   .. method:: enabled(self) -> bool
      :property:

      Returns the enabled status as bool. Must be implemented in subclass.



.. py:class:: AutoStartSystemd(service_name: str, start_cmd: str, unit_dict: Optional[Dict[str, str]] = None, service_dict: Optional[Dict[str, str]] = None, install_dict: Optional[Dict[str, str]] = None)

   Bases: :class:`maestral.utils.autostart.AutoStartBase`

   Autostart backend for systemd. Used to start a daemon on Linux.

   :param service_name: Name of systemd service.
   :param start_cmd: Absolute path to executable and optional program arguments.
   :param unit_dict: Dictionary of additional keys and values for the Unit section.
   :param service_dict: Dictionary of additional keys and values for the Service
       section.
   :param install_dict: Dictionary of additional keys and values for the Install
       section.

   .. method:: enable(self) -> None

      Enable autostart. Must be implemented in subclass.


   .. method:: disable(self) -> None

      Disable autostart. Must be implemented in subclass.


   .. method:: enabled(self) -> bool
      :property:

      Checks if the systemd service is enabled.



.. py:class:: AutoStartLaunchd(bundle_id: str, start_cmd: str)

   Bases: :class:`maestral.utils.autostart.AutoStartBase`

   Autostart backend for launchd. Used to start a GUI or daemon on macOS.

   :param bundle_id: Bundle ID for the, e.g., "com.google.calendar".
   :param start_cmd: Absolute path to executable and optional program arguments.

   .. method:: enable(self) -> None

      Enable autostart. Must be implemented in subclass.


   .. method:: disable(self) -> None

      Disable autostart. Must be implemented in subclass.


   .. method:: enabled(self) -> bool
      :property:

      Checks if the launchd plist exists in ~/Library/LaunchAgents.



.. py:class:: AutoStartXDGDesktop(app_name: str, start_cmd: str, filename: Optional[str], **kwargs: str)

   Bases: :class:`maestral.utils.autostart.AutoStartBase`

   Autostart backend for XDG desktop entries. Used to start a GUI on user login for
   most Linux desktops. For a full specifications, please see:

   https://specifications.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html

   :param Name: Name of application.
   :param Exec: Executable on $PATH or absolute path to executable and optional program
       arguments.
   :param filename: Name of desktop entry file. If not given, the application name will
       be used.
   :param kwargs: Additional key, value pairs to be used in the desktop entries. Values
       must be strings and may not contain "=", otherwise no additional validation will
       be performed.

   .. method:: enable(self) -> None

      Enable autostart. Must be implemented in subclass.


   .. method:: disable(self) -> None

      Disable autostart. Must be implemented in subclass.


   .. method:: enabled(self) -> bool
      :property:

      Checks if the XDG desktop entry exists in ~/.config/autostart.



.. function:: get_available_implementation() -> Optional[SupportedImplementations]

   Returns the supported implementation depending on the platform.


.. function:: get_maestral_command_path() -> str

   Returns the path to the maestral executable. May be an empty string if the
   executable cannot be found.


.. py:class:: AutoStart(config_name: str)

   Creates auto-start files in the appropriate system location to automatically
   start Maestral when the user logs in. Different backends are used depending on the
   platform.

   .. method:: enabled(self) -> bool
      :property:

      True if autostart is enabled.


   .. method:: toggle(self) -> None

      Toggles autostart on or off.


   .. method:: enable(self) -> None

      Setter: True if autostart is enabled.


   .. method:: disable(self) -> None

      Setter: True if autostart is enabled.



