:mod:`maestral.utils.cli`
=========================

.. py:module:: maestral.utils.cli

.. autoapi-nested-parse::

   Module to print neatly formatted tables and grids to the terminal.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   maestral.utils.cli.Align
   maestral.utils.cli.Elide
   maestral.utils.cli.Field
   maestral.utils.cli.TextField
   maestral.utils.cli.DateField
   maestral.utils.cli.Column
   maestral.utils.cli.Table
   maestral.utils.cli.Grid



Functions
~~~~~~~~~

.. autoapisummary::

   maestral.utils.cli.elide
   maestral.utils.cli.adjust


.. py:class:: Align

   Bases: :class:`enum.Enum`

   Text alignment in column.

   :cvar Left: Left alignment.
   :cvar Right: Right alignment.


.. py:class:: Elide

   Bases: :class:`enum.Enum`

   Elide directives.

   :cvar Leading: Truncate beginning of text.
   :cvar Center: Truncate center of text.
   :cvar Trailing: Truncate end of text.


.. function:: elide(text: str, width: int, placeholder: str = '...', elide: Elide = Elide.Trailing) -> str

   Elides a string to fit into the given width.

   :param text: Text to truncate.
   :param width: Target width.
   :param placeholder: Placeholder string to indicate truncated text.
   :param elide: Which part to truncate.
   :returns: Truncated text.


.. function:: adjust(text: str, width: int, align: Align = Align.Left) -> str

   Pads a string with spaces up the desired width. Preserves ANSI color codes without
   counting them towards the width.

   This function is similar to ``str.ljust`` and ``str.rjust``.

   :param text: Initial string.
   :param width: Target width. If smaller than the given text, nothing is done.
   :param align: Side to align the padded string: to the left or to the right.


.. py:class:: Field

   Base class to represent a field in a table.

   .. method:: display_width(self) -> int
      :property:

      The requested total width of the content in characters when not wrapped or
      shortened in any way.


   .. method:: format(self, width: int) -> List[str]
      :abstractmethod:

      Returns the field content formatted to fit the requested width.

      :param width: Width to fit.
      :returns: Shortened or wrapped string.



.. py:class:: TextField(text: str, align: Align = Align.Left, wraps: bool = False, elide: Elide = Elide.Trailing, **style)

   Bases: :class:`maestral.utils.cli.Field`

   A text field for a table.

   :param text: Text to represent.
   :param align: Text alignment: right or left.
   :param wraps: Whether to wrap the text instead of truncating it to fit into a
       requested width.
   :elide: Truncation strategy: trailing, center or leading.
   :param style: Styling passed on to :meth:`click.style` when styling the text.

   .. method:: display_width(self) -> int
      :property:

      The requested total width of the content in characters when not wrapped or
      shortened in any way.


   .. method:: format(self, width: int) -> List[str]

      Returns the field content formatted to fit the requested width.

      :param width: Width to fit.
      :returns: Shortened or wrapped string.



.. py:class:: DateField(dt: datetime, **style)

   Bases: :class:`maestral.utils.cli.Field`

   A datetime field for a table. The formatting of the datetime will be adjusted
   depending on the available width. Does not currently support localisation.

   :param dt: Datetime to represent.
   :param style: Styling passed on to :meth:`click.style` when styling the text.

   .. method:: display_width(self) -> int
      :property:

      The requested total width of the content in characters when not wrapped or
      shortened in any way.


   .. method:: format(self, width: int) -> List[str]

      Returns the field content formatted to fit the requested width.

      :param width: Width to fit.
      :returns: Shortened or wrapped string.



.. py:class:: Column(title: str, fields: Sequence = (), align: Align = Align.Left, wraps: bool = False, elide: Elide = Elide.Trailing)

   A table column.

   :param title: Column title.
   :param fields: Fields in the table. Any sequence of objects can be given and will be
       converted to :class:`Field` instances as appropriate.
   :param align: How to align text inside the column. Will only be used for
       :class:`TextField`s.
   :param wraps: Whether to wrap fields to fit into the column width instead of
       truncating them. Will only be used for :class:`TextField`s.
   :param elide: How to elide text which is too wide for a column. Will only be used
       for :class:`TextField`s.


.. py:class:: Table(columns: List[Union[Column, str]], padding: int = 2)

   A table which can be printed to stdout.

   :param columns: Table columns. Can be a list of :class:`Column` instances or table
       titles.
   :param padding: Padding between columns.

   .. method:: ncols(self) -> int
      :property:

      The number of columns


   .. method:: nrows(self) -> int
      :property:

      The number of rows


   .. method:: append(self, row: Sequence) -> None

      Appends a new row to the table.

      :param row: List of fields to append to each column. Length must match the
          number of columns.


   .. method:: rows(self) -> List[List[Field]]

      Returns a list of rows in the table. Each row is a list of fields.


   .. method:: format_lines(self, width: Optional[int] = None) -> Iterator[str]

      Iterator over formatted lines of the table. Fields may span multiple lines if
      they are set to wrap instead of truncate.

      :param width: Width to fit the table.
      :returns: Iterator over lines which can be printed to the terminal.


   .. method:: format(self, width: Optional[int] = None) -> str

      Returns a fully formatted table as a string with linebreaks.

      :param width: Width to fit the table.
      :returns: Formatted table.


   .. method:: echo(self)

      Prints the table to the terminal.



.. py:class:: Grid(fields: Sequence = (), padding: int = 2, align: Align = Align.Left)

   A grid of fields which can be printed to stdout.

   :param fields: A sequence of fields (strings, datetimes, any objects with a string
       representation).
   :param padding: Padding between fields.
   :param align: Alignment of strings in the grid.

   .. method:: append(self, field: Any) -> None

      Appends a field to the grid.


   .. method:: format_lines(self, width: Optional[int] = None) -> Iterator[str]

      Iterator over formatted lines of the grid.

      :param width: Width to fit the grid.
      :returns: Iterator over lines which can be printed to the terminal.


   .. method:: format(self, width: Optional[int] = None) -> str

      Returns a fully formatted grid as a string with linebreaks.

      :param width: Width to fit the table.
      :returns: Formatted grid.


   .. method:: echo(self)

      Prints the grid to the terminal.



