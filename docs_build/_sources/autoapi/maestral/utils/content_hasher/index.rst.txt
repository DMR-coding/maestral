:mod:`maestral.utils.content_hasher`
====================================

.. py:module:: maestral.utils.content_hasher

.. autoapi-nested-parse::

   Module for content hashing.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   maestral.utils.content_hasher.DropboxContentHasher
   maestral.utils.content_hasher.StreamHasher



.. py:class:: DropboxContentHasher

   Computes a hash using the same algorithm that the Dropbox API uses for the
   the "content_hash" metadata field.
   The digest() method returns a raw binary representation of the hash.  The
   hexdigest() convenience method returns a hexadecimal-encoded version, which
   is what the "content_hash" metadata field uses.
   This class has the same interface as the hashers in the standard 'hashlib'
   package.

   .. rubric:: Example

   hasher = DropboxContentHasher()
   with open('some-file', 'rb') as f:
       while True:
           chunk = f.read(1024)  # or whatever chunk size you want
           if len(chunk) == 0:
               break
           hasher.update(chunk)
   print(hasher.hexdigest())


.. py:class:: StreamHasher(f, hasher)

   A wrapper around a file-like object (either for reading or writing)
   that hashes everything that passes through it.  Can be used with
   DropboxContentHasher or any 'hashlib' hasher.
   .. rubric:: Example

   hasher = DropboxContentHasher()
   with open('some-file', 'rb') as f:
       wrapped_f = StreamHasher(f, hasher)
       response = some_api_client.upload(wrapped_f)
   locally_computed = hasher.hexdigest()
   assert response.content_hash == locally_computed


