:mod:`maestral.utils.notify`
============================

.. py:module:: maestral.utils.notify

.. autoapi-nested-parse::

   This module handles desktop notifications for Maestral and supports multiple backends,
   depending on the platform.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   maestral.utils.notify.DesktopNotifierBase
   maestral.utils.notify.NotificationLevel
   maestral.utils.notify.Notification
   maestral.utils.notify.DesktopNotifier
   maestral.utils.notify.MaestralDesktopNotifier



.. py:class:: DesktopNotifierBase(app_name: str = '', app_id: str = '', notification_limit: int = 5)

   Base class for desktop notifications. Notification levels CRITICAL, NORMAL and LOW
   may be used by some implementations to determine how a notification is displayed.

   :param app_name: Name to identify the application in the notification center. On
       Linux, this should correspond to the application name in a desktop entry. On
       macOS, this field is discarded and the app is identified by the bundle id of the
       sending program (e.g., Python).
   :param notification_limit: Maximum number of notifications to keep in the system's
       notification center. This may be ignored by some implementations.

   .. method:: send(self, notification: Notification) -> None
      :abstractmethod:

      Some arguments may be ignored, depending on the implementation.



.. py:class:: NotificationLevel

   Bases: :class:`enum.Enum`

   Enumeration of notification levels. The interpretation and visuals will depend
   on the platform.

   :cvar Critical: For critical errors.
   :cvar Normal: Default platform notification level.
   :cvar Low: Low priority notification.


.. py:class:: Notification(title: str, message: str, urgency: NotificationLevel = NotificationLevel.Normal, icon: Optional[str] = None, action: Optional[Callable] = None, buttons: Optional[Dict[str, Optional[Callable]]] = None)

   A desktop notification

   :param title: Notification title.
   :param message: Notification message.
   :param urgency: Notification level: low, normal or critical. This is ignored by some
       implementations.
   :param icon: Path to an icon to use for the notification, typically the app icon.
       This is ignored by some implementations, e.g., on macOS where the icon of the
       app bundle is always used.
   :param action: Handler to call when the notification is clicked. This is ignored by
       some implementations.
   :param buttons: A dictionary with button names to show in the notification and
       handler to call when the respective button is clicked. This is ignored by some
       implementations.

   :ivar identifier: An identifier which gets assigned to the notification after it is
       sent. This may be a str or int, depending on the type of identifier used by the
       platform.


.. py:class:: DesktopNotifier(app_name: str, app_id: str)

   Cross-platform desktop notifications for macOS and Linux. Uses different backends
   depending on the platform version and available services. The Dbus backend requires
   a running asyncio loop. The Cocoa implementations will dispatch notifications
   without an event loop but require a running CFRunLoop *in the main thread* to react
   to user interactions with the notification. Packages such as :mod:`rubicon.objc` can
   be used to integrate asyncio with a CFRunLoop.

   :param app_name: Name of app which sends notifications.
   :param app_id: Bundle identifier of the app. This is typically a reverse domain name
       such as 'com.google.app'.

   .. method:: send(self, title: str, message: str, urgency: NotificationLevel = NotificationLevel.Normal, icon: Optional[str] = None, action: Optional[Callable] = None, buttons: Optional[Dict[str, Optional[Callable]]] = None) -> None

      Sends a desktop notification. Some arguments may be ignored, depending on the
      backend.

      :param title: Notification title.
      :param message: Notification message.
      :param urgency: Notification level: low, normal or critical. This is ignored by
          some implementations.
      :param icon: Path to an icon to use for the notification, typically the app
          icon. This is ignored by some implementations, e.g., on macOS where the icon
          of the app bundle is always used.
      :param action: Handler to call when the notification is clicked. This is ignored
          by some implementations.
      :param buttons: A dictionary with button names and callbacks to show in the
          notification. This is ignored by some implementations.



.. py:class:: MaestralDesktopNotifier(config_name: str)

   Desktop notifier with notification levels and snooze functionality.

   :cvar int NONE: Notification level for no desktop notifications.
   :cvar int ERROR: Notification level for errors.
   :cvar int SYNCISSUE: Notification level for sync issues.
   :cvar int FILECHANGE: Notification level for file changes.

   .. method:: level_number_to_name(cls, number: int) -> str
      :classmethod:

      Converts a Maestral notification level number to name.


   .. method:: level_name_to_number(cls, name: str) -> int
      :classmethod:

      Converts a Maestral notification level name to number.


   .. method:: notify_level(self) -> int
      :property:

      Custom notification level. Notifications with a lower level will be
      discarded.


   .. method:: snoozed(self) -> float
      :property:

      Time in minutes to snooze notifications. Applied to FILECHANGE level only.


   .. method:: notify(self, title: str, message: str, level: int = FILECHANGE, on_click: Optional[Callable] = None, buttons: Optional[Dict[str, Optional[Callable]]] = None) -> None

      Sends a desktop notification.

      :param title: Notification title.
      :param message: Notification message.
      :param level: Notification level of the message.
      :param on_click: A callback to execute when the notification is clicked. The
          provided callable must not take any arguments.
      :param buttons: A dictionary with button names and callbacks for the
          notification.



